#!/usr/bin/env bash

echo "Install path:"
read INSTALL_PATH

echo "Allow SSH to secure remote IP used when VPN is down:"
read IP_SSH_REMOTE

echo "Allow ALL to internal IP like an admin VPN:"
read IP_ALL

echo "Is this a swarm master node (yes/no; default: no):"
read SWARM_MASTER

if [ "$SWARM_MASTER" = "yes" ]; then
    echo "Publish swarm ports (yes/no; default: no):"
    read SWARM_PORTS

    echo "Admin username:"
    read ADMIN_USERNAME

    echo "Admin password:"
    read ADMIN_PASSWORD

    echo "Slack key:"
    read SLACK_KEY

    echo "Slack username:"
    read SLACK_USERNAME

    echo "Slack channel:"
    read SLACK_CHANNEL
else
    echo "Swarm host:"
    read SWARM_HOST

    echo "Swarm port:"
    read SWARM_PORT

    echo "Swarm token:"
    read SWARM_TOKEN
fi

###

DIRNAME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Remove online.net mirrors
sed -i 's/http:\/\/mirrors.online.net\/ubuntu/http:\/\/archive.ubuntu.com\/ubuntu/' /etc/apt/sources.list

apt-get update
DEBIAN_FRONTEND="noninteractive" apt-get upgrade -y

DEBIAN_FRONTEND="noninteractive" apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common

DEBIAN_FRONTEND="noninteractive" apt-get install -y iptables-persistent
DEBIAN_FRONTEND="noninteractive" apt-get install -y openvpn socat
DEBIAN_FRONTEND="noninteractive" apt-get install -y apache2-utils

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

apt-key fingerprint 0EBFCD88

add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

apt-get update
DEBIAN_FRONTEND="noninteractive" apt-get install -y docker-ce
apt-cache madison docker-ce

###

mkdir -p ${INSTALL_PATH}
rm -rf ${INSTALL_PATH}/bin
mkdir -p ${INSTALL_PATH}/bin

cp -r ${DIRNAME}/../install/bin/iptables ${INSTALL_PATH}/bin/
cp -r ${DIRNAME}/../install/bin/openvpn ${INSTALL_PATH}/bin/
chmod +x ${INSTALL_PATH}/bin/*

if [ -d "$INSTALL_PATH/config" ]; then
    echo "Directory exists. Do you want to remove the configs (yes/no, default: no):"
    read willRm

    if [ "$willRm" = "yes" ]; then
        echo "Removing old configs..."

        rm -rf ${INSTALL_PATH}/config
        mkdir -p ${INSTALL_PATH}/config
        cp -r ${DIRNAME}/../install/config/iptables ${INSTALL_PATH}/config/
        mkdir -p ${INSTALL_PATH}/config/openvpn/available
        mkdir -p ${INSTALL_PATH}/config/openvpn/enabled
        mkdir -p ${INSTALL_PATH}/config/openvpn/enabled_swarm
        mkdir -p ${INSTALL_PATH}/config/iptables/available
        mkdir -p ${INSTALL_PATH}/config/iptables/enabled

        if [ "$(ls -A $INSTALL_PATH/config/iptables/available)" ]; then
            ln -s ${INSTALL_PATH}/config/iptables/available/* ${INSTALL_PATH}/config/iptables/enabled/
        fi
        if [ "$(ls -A $INSTALL_PATH/config/openvpn/available)" ]; then
            ln -s ${INSTALL_PATH}/config/openvpn/available/* ${INSTALL_PATH}/config/openvpn/enabled/
        fi
    fi
else
    mkdir -p ${INSTALL_PATH}/config
    cp -r ${DIRNAME}/../install/config/iptables ${INSTALL_PATH}/config/
    mkdir -p ${INSTALL_PATH}/config/openvpn/available
    mkdir -p ${INSTALL_PATH}/config/openvpn/enabled
    mkdir -p ${INSTALL_PATH}/config/openvpn/enabled_swarm
    mkdir -p ${INSTALL_PATH}/config/iptables/available
    mkdir -p ${INSTALL_PATH}/config/iptables/enabled

    if [ "$(ls -A $INSTALL_PATH/config/iptables/available)" ]; then
        ln -s ${INSTALL_PATH}/config/iptables/available/* ${INSTALL_PATH}/config/iptables/enabled/
    fi
    if [ "$(ls -A $INSTALL_PATH/config/openvpn/available)" ]; then
        ln -s ${INSTALL_PATH}/config/openvpn/available/* ${INSTALL_PATH}/config/openvpn/enabled/
    fi
fi

sed -i "s/{{IP_SSH_REMOTE}}/$IP_SSH_REMOTE/" ${INSTALL_PATH}/config/iptables/available/ssh.sh

if [ "$IP_ALL" != "" ]; then
    sed -i "s/{{IP_ALL}}/$IP_ALL/" ${INSTALL_PATH}/config/iptables/available/all.sh
else
    rm -rf ${INSTALL_PATH}/config/iptables/enabled/all.sh
fi

# Run configs
bash ${INSTALL_PATH}/bin/iptables
bash ${INSTALL_PATH}/bin/openvpn

/etc/init.d/docker start

if [ "$SWARM_MASTER" = "yes" ]; then

    cp -r "$DIRNAME/../install/bin/swarm" ${INSTALL_PATH}/bin/
    chmod +x ${INSTALL_PATH}/bin/swarm
    cp -r "$DIRNAME/../install/bin/swarm-snet" ${INSTALL_PATH}/bin/
    chmod +x ${INSTALL_PATH}/bin/swarm-snet
    cp -r "$DIRNAME/../install/bin/swarm-add-node" ${INSTALL_PATH}/bin/
    chmod +x ${INSTALL_PATH}/bin/swarm-add-node

    if [ -d "$INSTALL_PATH/config/swarm" ]; then
        echo "Swarm config exists. Do you want to remove the configs (yes/no, default: no):"
        read willRm2

        if [ "$willRm2" = "yes" ]; then
            echo "Removing old swarm configs..."

            rm -rf "$DIRNAME/../install/config/swarm"
            cp -r "$DIRNAME/../install/config/swarm" ${INSTALL_PATH}/config/
        fi
    else
        cp -r "$DIRNAME/../install/config/swarm" ${INSTALL_PATH}/config/
    fi

    # Host setting for ElasticSearch
    # sysctl -w vm.max_map_count=262144

    # Init swarm
    docker swarm init

    HOST_IP=`cut -d'/' -f1 <<< \`ip -o addr show docker_gwbridge | awk '{print $4}'\``

    if [ "$HOST_IP" != "" ]; then
        echo "{\"experimental\": true, \"metrics-addr\": \"$HOST_IP:9323\"}" > /etc/docker/daemon.json
        /etc/init.d/docker restart
    fi

    # Init swarm network
    docker network create --attachable -d overlay swarm

    # Init swarm volumes
    docker volume create swarm-portainer
    docker volume create swarm-prometheus-alertmanager
    docker volume create swarm-prometheus
    docker volume create swarm-grafana
    docker volume create swarm-grafana-log
    docker volume create swarm-grafana-etc

    # Replace variables

    sed -i "s/{{HOST_IP}}/$HOST_IP/" ${INSTALL_PATH}/config/swarm/vars.sh

    sed -i "s/{{ADMIN_USERNAME}}/$ADMIN_USERNAME/" ${INSTALL_PATH}/config/swarm/vars.sh
    sed -i "s/{{ADMIN_PASSWORD}}/$ADMIN_PASSWORD/" ${INSTALL_PATH}/config/swarm/vars.sh

    sed -i "s/{{SLACK_KEY}}/$SLACK_KEY/" ${INSTALL_PATH}/config/swarm/vars.sh
    sed -i "s/{{SLACK_USERNAME}}/$SLACK_USERNAME/" ${INSTALL_PATH}/config/swarm/vars.sh
    sed -i "s/{{SLACK_CHANNEL}}/$SLACK_CHANNEL/" ${INSTALL_PATH}/config/swarm/vars.sh

    sed -i "s#{{SWARM_PATH}}#$INSTALL_PATH#" ${INSTALL_PATH}/config/swarm/stack.yml

    if [ "$SWARM_PORTS" = "yes" ]; then
        sed -i 's@{{SWARM_PORTS}}@ -p "3000:3000" -p "3001:3001" -p "3002:3002" -p "3003:3003" -p "3004:3004" @' ${INSTALL_PATH}/bin/swarm-snet
    else
        sed -i 's@{{SWARM_PORTS}}@ @' ${INSTALL_PATH}/bin/swarm-snet
    fi

    # Run stack
    bash ${INSTALL_PATH}/bin/swarm
    bash ${INSTALL_PATH}/bin/swarm-snet

else

    # Init swarm
    docker swarm join --token "$SWARM_TOKEN" "$SWARM_HOST:$SWARM_PORT"

    HOST_IP=`cut -d'/' -f1 <<< \`ip -o addr show docker_gwbridge | awk '{print $4}'\``

    if [ "$HOST_IP" != "" ]; then
        echo "{\"experimental\": true, \"metrics-addr\": \"$HOST_IP:9323\"}" > /etc/docker/daemon.json
        /etc/init.d/docker restart
    fi

fi

